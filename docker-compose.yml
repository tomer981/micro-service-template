services:
  log-rest:
    build:
      context: log-rest
      dockerfile: Dockerfile.dev
    container_name: log-rest
    hostname: log-rest
    restart: on-failure
    networks:
      - backend-network
    ports:
      - "3005:3000"
    volumes:
      - ./log-rest/src:/app/src
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - log-rest/config/.env.development
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3000}
      HOST: ${HOST:-localhost}
      DISABLE_HELMET: ${DISABLE_HELMET:-FALSE}
      JET_LOGGER_MODE: ${JET_LOGGER_MODE:-CONSOLE}
      JET_LOGGER_FILEPATH: ${JET_LOGGER_FILEPATH:-jet-logger.log}
      JET_LOGGER_TIMESTAMP: ${JET_LOGGER_TIMESTAMP:-TRUE}
      JET_LOGGER_FORMAT: ${JET_LOGGER_FORMAT:-LINE}
      MONGO_URI: ${MONGO_URI:-mongodb://mongo:27017/db}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-example}

  log-workers:
    build:
      context: log-workers
      dockerfile: Dockerfile.dev
    container_name: log-workers
    hostname: log-workers
    env_file:
      - log-workers/config/.env.development
    networks:
      - backend-network
    ports:
      - "3006:3000"
    volumes:
      - ./log-workers/src:/app/src
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3000}
      HOST: ${HOST:-localhost}
      DISABLE_HELMET: ${DISABLE_HELMET:-FALSE}
      JET_LOGGER_MODE: ${JET_LOGGER_MODE:-CONSOLE}
      JET_LOGGER_FILEPATH: ${JET_LOGGER_FILEPATH:-jet-logger.log}
      JET_LOGGER_TIMESTAMP: ${JET_LOGGER_TIMESTAMP:-TRUE}
      JET_LOGGER_FORMAT: ${JET_LOGGER_FORMAT:-LINE}
      MONGO_URI: ${MONGO_URI:-mongodb://mongo:27017/db}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-example}
      RABBITMQ_URI: ${RABBITMQ_URI:-rabbitmq}
      RABBITMQ_QUEUE_LOGS: ${RABBITMQ_QUEUE_LOGS:-log_queue}

#  game-score:
#    build:
#      context: game-score
#      dockerfile: Dockerfile.dev
#    container_name: game-score
#    hostname: game-score
#    networks:
#      - backend-network
#    ports:
#      - "3000:3000"
#    volumes:
#      - ./game-score/src:/app/src
#    depends_on:
#      mongo:
#        condition: service_healthy
#    env_file:
#      - game-score/config/.env.development
#    environment:
#      NODE_ENV: ${NODE_ENV:-development}
#      PORT: ${PORT:-3000}
#      HOST: ${HOST:-localhost}
#      DISABLE_HELMET: ${DISABLE_HELMET:-FALSE}
#      JET_LOGGER_MODE: ${JET_LOGGER_MODE:-CONSOLE}
#      JET_LOGGER_FILEPATH: ${JET_LOGGER_FILEPATH:-jet-logger.log}
#      JET_LOGGER_TIMESTAMP: ${JET_LOGGER_TIMESTAMP:-TRUE}
#      JET_LOGGER_FORMAT: ${JET_LOGGER_FORMAT:-LINE}
#      MONGO_URI: ${MONGO_URI:-mongodb://mongo:27017/db}
#      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
#      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-example}
#
#  leaderboard:
#    build:
#      context: leaderboard
#      dockerfile: Dockerfile.dev
#    container_name: leaderboard
#    hostname: leaderboard
#    networks:
#      - backend-network
#    ports:
#      - "3001:3000"
#    volumes:
#      - ./leaderboard/src:/app/src
#    depends_on:
#      mongo:
#        condition: service_healthy
#    env_file:
#      - leaderboard/config/.env.development
#    environment:
#      NODE_ENV: ${NODE_ENV:-development}
#      PORT: ${PORT:-3000}
#      HOST: ${HOST:-localhost}
#      DISABLE_HELMET: ${DISABLE_HELMET:-FALSE}
#      JET_LOGGER_MODE: ${JET_LOGGER_MODE:-CONSOLE}
#      JET_LOGGER_FILEPATH: ${JET_LOGGER_FILEPATH:-jet-logger.log}
#      JET_LOGGER_TIMESTAMP: ${JET_LOGGER_TIMESTAMP:-TRUE}
#      JET_LOGGER_FORMAT: ${JET_LOGGER_FORMAT:-LINE}
#      MONGO_URI: ${MONGO_URI:-mongodb://mongo:27017/db}
#      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
#      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-example}
#
#  log-management:
#    build:
#      context: log-management
#      dockerfile: Dockerfile.dev
#    container_name: log-management
#    hostname: log-management
#    env_file:
#      - log-management/config/.env.development
#    networks:
#      - backend-network
#    ports:
#      - "3002:3000"
#    volumes:
#      - ./log-management/src:/app/src
#    depends_on:
#      rabbitmq:
#        condition: service_healthy
#      mongo:
#        condition: service_healthy
#    environment:
#      NODE_ENV: ${NODE_ENV:-development}
#      PORT: ${PORT:-3000}
#      HOST: ${HOST:-localhost}
#      DISABLE_HELMET: ${DISABLE_HELMET:-FALSE}
#      JET_LOGGER_MODE: ${JET_LOGGER_MODE:-CONSOLE}
#      JET_LOGGER_FILEPATH: ${JET_LOGGER_FILEPATH:-jet-logger.log}
#      JET_LOGGER_TIMESTAMP: ${JET_LOGGER_TIMESTAMP:-TRUE}
#      JET_LOGGER_FORMAT: ${JET_LOGGER_FORMAT:-LINE}
#      MONGO_URI: ${MONGO_URI:-mongodb://mongo:27017/db}
#      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
#      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-example}
#      RABBITMQ_URI: ${RABBITMQ_URI:-rabbitmq}
#      RABBITMQ_QUEUE_LOGS: ${RABBITMQ_QUEUE_LOGS:-log_queue}
#
#  player-management:
#    build:
#      context: player-management
#      dockerfile: Dockerfile.dev
#    container_name: player-management
#    hostname: player-management
#    networks:
#      - backend-network
#    ports:
#      - "3003:3000"
#    volumes:
#      - ./player-management/src:/app/src
#    depends_on:
#      mongo:
#        condition: service_healthy
#    env_file:
#      - player-management/config/.env.development
#    environment:
#      NODE_ENV: ${NODE_ENV:-development}
#      PORT: ${PORT:-3000}
#      HOST: ${HOST:-localhost}
#      DISABLE_HELMET: ${DISABLE_HELMET:-FALSE}
#      JET_LOGGER_MODE: ${JET_LOGGER_MODE:-CONSOLE}
#      JET_LOGGER_FILEPATH: ${JET_LOGGER_FILEPATH:-jet-logger.log}
#      JET_LOGGER_TIMESTAMP: ${JET_LOGGER_TIMESTAMP:-TRUE}
#      JET_LOGGER_FORMAT: ${JET_LOGGER_FORMAT:-LINE}
#      MONGO_URI: ${MONGO_URI:-mongodb://mongo:27017/db}
#      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
#      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-example}

  rabbitmq:
    image: rabbitmq:4.0.7-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    volumes:
      - ./enabled_plugins:/etc/rabbitmq/enabled_plugins
    networks:
      - backend-network
    ports:
      - "5552:5552"
      - "5672:5672"
      - "15672:15672"

  mongo:
    image: mongo:7.0.18-jammy
    container_name: mongo
    hostname: mongo
    restart: always
    healthcheck:
      test: mongosh --eval "db.adminCommand('ping')"
      interval: 5s
      timeout: 30s
      retries: 10
    ports:
      - "27017:27017"
    networks:
      - backend-network
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express:1.0.2-20-alpine3.19
    restart: always
    container_name: mongo-express
    hostname: mongo-express
    networks:
      - backend-network
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH: false

networks:
  backend-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local